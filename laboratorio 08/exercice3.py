# Clase Nodo para representar un nodo en el √°rbol binario
class TreeNode:
    def __init__(self, value):
        self.value = value  # Valor del nodo
        self.left = None     # Hijo izquierdo
        self.right = None    # Hijo derecho

# Clase √Årbol Binario
class BinaryTree:
    def __init__(self):
        self.root = None  # Ra√≠z del √°rbol binario

    # Construye un √°rbol binario a partir de una lista de valores en nivel
    def build_tree_from_list(self, values):
        if not values:
            return  # Si la lista est√° vac√≠a, no hay √°rbol
        self.root = TreeNode(values[0])  # El primer valor es la ra√≠z
        queue = [self.root]  # Usamos una cola para construir el √°rbol en niveles
        i = 1  # √çndice para recorrer la lista de valores
        while queue and i < len(values):
            current = queue.pop(0)  # Extraemos el primer nodo de la cola
            if i < len(values) and values[i] is not None:  # Si hay un valor para el hijo izquierdo
                current.left = TreeNode(values[i])  # Creamos el hijo izquierdo
                queue.append(current.left)  # Lo a√±adimos a la cola
            i += 1
            if i < len(values) and values[i] is not None:  # Si hay un valor para el hijo derecho
                current.right = TreeNode(values[i])  # Creamos el hijo derecho
                queue.append(current.right)  # Lo a√±adimos a la cola
            i += 1

# Funci√≥n para encontrar el ancestro com√∫n m√°s bajo entre dos nodos
def lowest_common_ancestor(root, p, q):
    if not root:
        return None  # Si no hay nodo, no hay ancestro
    if root.value == p or root.value == q:
        return root  # Si el nodo es igual a uno de los valores, es el ancestro com√∫n
    # Buscamos el ancestro com√∫n en el sub√°rbol izquierdo y derecho
    left = lowest_common_ancestor(root.left, p, q)
    right = lowest_common_ancestor(root.right, p, q)
    if left and right:
        return root  # Si encontramos p en el sub√°rbol izquierdo y q en el derecho, la ra√≠z es el ancestro com√∫n
    return left if left else right  # Si solo encontramos uno de los nodos en el sub√°rbol, lo retornamos

# Funci√≥n de prueba para el ancestro com√∫n m√°s bajo
def test_lowest_common_ancestor():
    print("Testing Challenge 3: Lowest Common Ancestor üë®‚Äçüë©‚Äçüëß‚Äçüë¶")
    cases = [
        ([1, 2, 3, 4, 5, None, 6], 4, 6, 1, "Different subtrees"),  # Caso con nodos en diferentes sub√°rboles
        ([1, 2, 3, 4], 2, 4, 2, "Ancestor and descendant"),  # Caso donde uno es ancestro de otro
        ([1, 2, 3], 2, 3, 1, "Siblings"),  # Caso con nodos hermanos
        ([1, 2, 3], 1, 3, 1, "Root and child"),  # Caso con la ra√≠z y un hijo
    ]
    for values, a, b, expected, label in cases:
        tree = BinaryTree()  # Crear el √°rbol
        tree.build_tree_from_list(values)  # Construir el √°rbol a partir de la lista de valores
        result = lowest_common_ancestor(tree.root, a, b)  # Encontrar el ancestro com√∫n m√°s bajo
        # Verificar que el valor del resultado sea el esperado
        assert result and result.value == expected, f"{label} FAILED"
        print(f"{label} PASSED ‚úÖ")  # Si la prueba pas√≥, mostrar el mensaje

# Ejecutar las pruebas
test_lowest_common_ancestor()
